{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","console","log","useEffect","getItem","jsonPayload","parse","loadToDos","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onSubmitEditing","newToDos","Date","now","autoCapitalize","returnKeyType","onChangeText","payload","value","placeholder","input","ScrollView","Object","keys","map","key","toDo","toDoText","Platform","OS","confirm","Alert","alert","deleteTodo","Fontisto","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.6d2c34b1.chunk.js","sourcesContent":["export const theme = {\n  bg: \"black\",\n  grey: \"#3A3D40\",\n  delete: \"#7D7D81\",\n};\n","import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Alert,\n  Platform,\n  ScrollView,\n  StyleSheet,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { theme } from \"./colors\";\n\nconst STORAGE_KEY = \"@toDos\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  useEffect(() => {\n    loadToDos();\n  }, []);\n\n  function travel() {\n    setWorking(false);\n  }\n  function work() {\n    setWorking(true);\n  }\n  function onChangeText(payload) {\n    setText(payload);\n  }\n  async function saveToDos(toSave) {\n    try {\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  async function loadToDos() {\n    try {\n      const jsonPayload = await AsyncStorage.getItem(STORAGE_KEY);\n      return jsonPayload != null ? setToDos(JSON.parse(jsonPayload)) : null;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  async function addToDo() {\n    if (text === \"\") {\n      return;\n    }\n    const newToDos = {\n      [Date.now()]: { text, working },\n      ...toDos,\n    };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  }\n  async function deleteTodo(key) {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To Do?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n        { text: \"Cancel\", style: \"cancel\" },\n        {\n          text: \"I'm sure\",\n          style: \"destructive\",\n          onPress: () => {\n            // Never mutate state\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  }\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: working ? \"white\" : theme.grey,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: working ? theme.grey : \"white\",\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        onSubmitEditing={addToDo}\n        autoCapitalize=\"sentences\"\n        returnKeyType=\"done\"\n        onChangeText={onChangeText}\n        value={text}\n        placeholder={working ? \"Write a To Do.\" : \"Where do you want to go?\"}\n        style={styles.input}\n      />\n      <ScrollView>\n        {Object.keys(toDos).map((key) =>\n          toDos[key].working === working ? (\n            <View style={styles.toDo} key={key}>\n              <Text style={styles.toDoText}>{toDos[key].text}</Text>\n              <TouchableOpacity onPress={() => deleteTodo(key)}>\n                <Fontisto name=\"trash\" size={18} color={theme.delete} />\n              </TouchableOpacity>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.grey,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n});\n"],"sourceRoot":""}